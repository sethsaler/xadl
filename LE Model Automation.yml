#>> The 'input' section defines the named inputs that this pipeline will receive.
#>> Each field within 'input' expects a certain type of data.
input:
  documents:
    type: document  #>> 'documents' is an input accepting document-type data (e.g., text or structured information).
  workspace:
    type: workspace #>> 'workspace' is an input for storing or accessing data across the pipeline.

actions:
  #>> The "actions" block defines a sequence of steps the pipeline will execute.

  # 1) Tags
  #>> This action finds and retrieves relevant tags (keywords/labels) from the provided content, based on a category.
  get-agreementInformation-tags:
    tool: find-tags
    category: "Agreement Information"  #>> The category of tags we want to extract is "Agreement Information."

  # 3) Base configuration for shared prompt elements
  #>> 'basePrompt' sets up a default or foundation prompt that other steps can reference when communicating with the LLM.
  basePrompt:
    tool: echo
    message: |
      # Role and Context Setup
      You are an internal advisor at a large organization, responsible for evaluating contractual obligations, compliance considerations, and strategic implications within agreements involving external contributors. Your objectives include:

      1. Identifying all obligations, commitments, and representations the organization has made regarding acknowledgments or recognition of any parties involved.
      2. Pinpointing potential risks or ambiguities, including any conditions or limitations on recognition obligations, noting relevant professional association or licensing requirements, deadlines, or other time-sensitive triggers.
      3. Providing actionable insights that integrate both regulatory and practical perspectives (e.g., compliance with external standards, reputation management, budgetary considerations).
      4. Highlighting any provisions that could require negotiation, revision, or special attention to mitigate legal or reputational exposure.

      When offering analysis or summarizing findings:
      - Focus on clarity, precision, and direct relevance to organizational commitments.
      - Avoid unnecessary speculation; adhere to explicit terms and established best practices.
      - Provide sound justifications for any concerns or proposed modifications.

  # 4) Contract Analysis prompt
  #>> 'contractAnalysisPrompt' references 'basePrompt' and then adds more details to instruct the LLM how to analyze text that may be related to acknowledgments or recognition obligations.
  contractAnalysisPrompt:
    tool: echo
    message: |
      {{basePrompt}}

      Below is key text from the agreement with an external contributor. As an internal advisor, you should:
      - Thoroughly review any recognition-related clauses to ensure alignment with the organization's policies and any professional or regulatory rules.
      - Identify potential loopholes, ambiguous language, or conflicting provisions that may lead to disputes or noncompliance.
      - Recommend steps (if any) to clarify, renegotiate, or reinforce obligations in line with organizational objectives and best practices.
      - Provide your analysis succinctly, focusing on the specific clauses below.

      Relevant language from the agreement:

  # 5) Section Titles
  #>> 'contractAnalysisTitle' is a straightforward echo action setting a title for the analysis output.
  contractAnalysisTitle:
    tool: echo
    message: Acknowledgment Obligations Output Test

  # 6) Initialize Knowledge Set
  #>> 'init-kset' creates or updates a "knowledge set" that will store any extracted insights and relevant information for later use.
  init-kset:
    input:
      documents: task/documents               #>> Passes the 'documents' from pipeline input.
      agreementInformationTags: get-agreementInformation-tags  #>> Passes the extracted tags from the earlier action.
    tool: knowledge-set
    knowledgeSetName: "Acknowledgment Obligations Memo"  #>> Names the knowledge set for future reference.
    operations:
      - op: add-dimension
        key: theme
        name: Theme
        nodes: agreementInformationTags
        priority: 1  #>> Adds a dimension named 'theme' to categorize or group data by the extracted tags.
      - op: set-nodes
        nodes: documents  #>> Associates all documents with this knowledge set under the 'theme' dimension.

  # 7) Analyze each tag
  #>> 'analyze-each-tag' repeats an analysis function for each tag found in 'get-agreementInformation-tags.'
  analyze-each-tag:
    repeat:
      function: analyze-for-tag  #>> The function to invoke for each tag is named 'analyze-for-tag.'
      for: [tag]                 #>> We'll iterate over a list of 'tag' items.
    input:
      tag: get-agreementInformation-tags  #>> Feeds in the extracted tags from 'get-agreementInformation-tags.'
      documents: task/documents          #>> Provides the original documents for context.
      knowledge: init-kset               #>> References the knowledge set so the function can store new insights.
      basePrompt: basePrompt             #>> Passes the base prompt for consistent LLM instructions.
      prompt: contractAnalysisPrompt     #>> Passes the specialized analysis prompt.
      title: contractAnalysisTitle       #>> Passes the title for the resulting insights.

  # 8) Add to Workspace
  #>> 'add-to-workspace' stores or merges the results from the previous steps into the workspace so they can be accessed or retrieved later.
  add-to-workspace:
    input:
      workspace: task/workspace
      contractAnalysis: analyze-each-tag  #>> The results from analyzing each tag.
      knowledge: init-kset               #>> The knowledge set object.
    tool: workspace
    operations:
      - op: add-items
        items: knowledge  #>> Adds the updated knowledge set to the workspace.

#>> The 'functions' block defines reusable operations or subroutines that can be called in the "actions" section.
functions:
  #>> 'analyze-for-tag' is a custom function that handles the logic of extracting text relevant to a given tag and then running LLM prompts on it.
  analyze-for-tag:
    input:
      tag:
        type: tag         #>> The specific tag to analyze (e.g., 'Preamble', 'Acknowledgment', etc.).
      documents:
        type: document    #>> Documents that might contain matching text for the given tag.
      basePrompt:
        type: text        #>> The foundational instructions for the LLM.
      get-instruction-prompt-for-tag:
        type: text        #>> A specialized instruction prompt for each tag, to tailor the LLM's output.
      prompt:
        type: text        #>> Additional or overriding instructions for the LLM.
      knowledge:
        type: knowledge-set #>> The knowledge set object to store insights.
      title:
        type: text        #>> A title string used when generating the new insight.

    actions:
      #>> 'get-snippets' filters the documents based on the current tag. Only text labeled with that tag is extracted.
      get-snippets:
        input:
          tag: function/tag
          documents: function/documents
        tool: document-text
        textFilter:
          operator: "and"
          tags: [tag]  #>> Ensures that only text chunks containing this specific tag are returned.

      #>> 'get-instruction-prompt-for-tag' dynamically generates a specialized prompt for the given tag, if needed.
      get-instruction-prompt-for-tag:
        input:
          tag: function/tag
        tool: echo
        message: |
          {% if tag.name == "Preamble" %}
          PREAMBLE instructions:
              OutputFormat: |
                  Extract and format the following information in this exact format:
                  **Contributor Name:** [Name]
                  **Contribution Type:** [Category]
                  **Role/Position:** [Position or Function]
                  **Agreement Name:** [Title]
                  **Effective Date:** [Date]
                  **Project Name:** [Title]
              
              RequiredFields:
                  - ContributorName: "Name of individual or organization"
                  - ContributionType: "Category of service (e.g., consultant, researcher, producer, etc.)"
                  - RolePosition: "Specific position or function in the project"
                  - AgreementName: "Formal name of the agreement"
                  - EffectiveDate: "Defined effective date or date of final signature; if missing, specify that"
                  - ProjectName: "Project or initiative title"
          {% endif %}

          {% if tag.name == "Acknowledgment" %}
          ACKNOWLEDGMENT instructions:
              RecognitionDetails:
                  SubjectMatter: "Summarizing any recognition or acknowledgment obligations in detail."
                  InformationNeeded:
                      - "All relevant points specifically mentioned in the provided text, such as:"
                      - "Front-end vs. back-end acknowledgments"
                      - "Special designations (e.g., featured contributor, highlighted role)"
                      - "Exclusive reference vs. shared reference, and any positional requirements (first, second, etc.)"
                      - "Font size or other formatting stipulations"
                      - "'No less favorable thanâ€¦' or parity language"
                      - "Organizational discretion over any of the above"
                      - "Only include items explicitly mentioned; do not add unverified conditions."
              OutputFormat: "Summarize all recognition obligations in a single paragraph, using **bold formatting** for key terms (e.g., **exclusive reference**, **featured contributor**) but do not include content beyond these necessary details."
              OverallGuidance:
              - "Strictly follow the Output Format: Provide only the requested fields, in the exact format, with no extra text."
              - "Use Bold Tags: For labels (e.g., **Contributor Name:**) and any special designations (e.g., **featured contributor**)."
              - "Avoid Irrelevant Content: No commentary or details beyond what is explicitly mentioned."
              - "Maintain Consistency: Ensure uniform formatting and style across sections."
          {% endif %}

          {% assign roles = "Preamble,Acknowledgment" | split: "," %}

          {% if roles contains tag.name %}
          {% else %}
          GENERAL instructions for {{tag.name}}
          - Use your best judgment.
          {% endif %}

      #>> 'run-prompt' uses the LLM to analyze the snippets in light of the specialized instructions and the base prompt.
      run-prompt:
        input:
          snippets: get-snippets
          basePrompt: function/basePrompt
          instructionPrompt: get-instruction-prompt-for-tag
          prompt: function/prompt
        tool: llm
        skipIfEmpty: snippets  #>> If there are no snippets matching the tag, this step is skipped.
        prompt: |
          {{instructionPrompt.text}}
          {{prompt.text}}
          {% for s in snippets %}
          {{s.text}}
          {% endfor %}

      #>> 'create-insight' takes the LLM's analysis and generates an "insight" object, capturing the summary and linking it to the source snippets.
      create-insight:
        input:
          summary: run-prompt
          snippets: get-snippets
          tag: function/tag
          title: function/title
        skipIfEmpty: summary  #>> This step is skipped if there's no summary from the LLM (i.e., empty snippets).
        tool: insight
        text: |
          {{summary.text}}
        name: "{{title.text}} for {{tag.name}}"
        tags: [tag]
        attributes:
          category: contract-analysis-insight  #>> Category can be reused for referencing the type of insight.
        relations:
          derived-from: [snippets]  #>> Points to the original text snippets as the data source.

      #>> 'add-insight' updates the knowledge set with the newly created insight, linking back to the relevant snippets.
      add-insight:
        input:
          knowledge: function/knowledge
          insight: create-insight
          snippets: get-snippets
        tool: knowledge-set
        operations:
          - op: set-nodes
            nodes: insight
          - op: set-nodes
            nodes: snippets
